{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jaybee\\\\Desktop\\\\test\\\\00parking\\\\xyz-parking\\\\src\\\\pages\\\\Main\\\\Main.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport { Car } from \"../../components/Car\";\nimport styles from \"./main.module.scss\";\nimport { ParkingSlot } from \"../../components/ParkingSlot\";\nimport { Controls } from \"../../components/Controls\";\nimport ParkingLot from \"../../lib/parking-lot\";\nimport { InfoBoard } from \"../../components/InfoBoard/InfoBoard\";\nimport { CarInfoBoard } from \"../../components/CarInfoBoard/CarInfoBoard\";\nimport axios from 'axios';\nimport carUrl from \"../../assets/car.png\";\nimport carUrl1 from \"../../assets/car1.png\";\nimport mcarUrl from \"../../assets/mcar.png\";\nimport mcarUrl1 from \"../../assets/mcar1.png\";\nimport lcarUrl from \"../../assets/lcar.png\";\nimport lcarUrl1 from \"../../assets/lcar1.png\";\nimport { SlotInfoBoard } from \"../../components/SlotInfoBoard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet cars = [{\n  size: 'small',\n  imgFront: carUrl,\n  imgBack: carUrl1\n}, {\n  size: 'medium',\n  imgFront: mcarUrl,\n  imgBack: mcarUrl1\n}, {\n  size: 'large',\n  imgFront: lcarUrl,\n  imgBack: lcarUrl1\n}];\nconst ROW_LIMIT = 5;\nexport const Main = _ref => {\n  _s();\n\n  let {\n    parkingData\n  } = _ref;\n  const [slotsData, setSlotsData] = useState([]);\n  const [parkingLot, setParkingLot] = useState(new ParkingLot({\n    slots: [],\n    data: {}\n  }));\n  const [availableSlots, setAvailableSlots] = useState(0);\n  const [rows, setRows] = useState([]);\n  const [carAnimation, setCarAnimation] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [carDir, setCarDir] = useState('in');\n  const [cardDisplay, setCardDisplay] = useState({});\n  const [cardOpen, setCardOpen] = useState(false);\n  const [cardType, setCardType] = useState('info');\n  const [message, setMessage] = useState(null);\n  const ENDPOINT = \"http://localhost:4000\";\n  const socket = socketIOClient(`${ENDPOINT}`, {// transports: [\"websocket\"]\n  }); // useEffect(() => {\n  //   setParkingLot(new ParkingLot(parkingData.slots));\n  //   // setAvailableSlots(parkingData.slots);\n  // }, [parkingData.slots]);\n\n  const handleClose = () => {\n    setCardOpen(false);\n    setCardDisplay({});\n    setCardType('info');\n    setMessage(null);\n  };\n\n  const getAllSlots = () => {\n    let slotsId = localStorage.getItem('slotsId');\n    parkingLot.getAllSlots(slotsId).then(a => {\n      setParkingLot(new ParkingLot({\n        slots: a,\n        data: parkingData\n      }));\n      setSlotsData(a);\n      setAvailableSlots(a.filter(s => !s.isBusy).length);\n    }).catch(err => {\n      setParkingLot(new ParkingLot({\n        slots: [],\n        data: parkingData\n      }));\n      setSlotsData([]);\n      setAvailableSlots(0);\n    });\n  };\n\n  const handlePark = async vals => {\n    setMessage(null);\n\n    if (availableSlots === 0) {\n      setMessage('OVER LOADED!');\n      return console.log('OVER LOADED!');\n    }\n\n    if (parkingLot.isFull()) {\n      // setInfoBoardVisible(true);\n      return;\n    }\n\n    let park = await parkingLot.park(vals);\n    getAllSlots();\n\n    if (!park.message) {\n      setCardOpen(false);\n      setCarDir('in');\n      setCarAnimation(state => true);\n      setCardDisplay(vals);\n      setTimeout(() => {\n        setAvailableSlots(parkingLot.getAvailable());\n        setCarAnimation(state => false);\n        setLoading(false);\n        setCardDisplay({});\n      }, 500);\n      setMessage(null);\n    } else {\n      setMessage(park.message);\n      setAvailableSlots(parkingLot.getAvailable());\n      setCarAnimation(state => false);\n      setLoading(false);\n      setCardDisplay({});\n    }\n  };\n\n  useEffect(() => {\n    let id = localStorage.getItem('slotsId');\n\n    if (id) {\n      getAllSlots();\n    }\n  }, []);\n  useEffect(() => {\n    function distributeSlotsToRows() {\n      let rowsCount = Math.ceil(slotsData.length / ROW_LIMIT);\n      let slotsCount = slotsData.length;\n      const rows = [];\n      let row = [];\n\n      while (parkingData.slots > 0 && rowsCount > 0) {\n        // It's important first to decrement the count of the slots otherwise we will miss one\n        slotsCount--;\n        const slot = parkingLot === null || parkingLot === void 0 ? void 0 : parkingLot.slots[slotsCount];\n        let slotObj = slotsData.find(a => a.slotNum === slotsCount);\n\n        if (slotObj) {\n          row.push(slotObj);\n        }\n\n        if (slotsCount % ROW_LIMIT === 0) {\n          rowsCount--;\n          rows.push(row);\n          row = [];\n        }\n      }\n\n      setRows(rows);\n    }\n\n    distributeSlotsToRows();\n  }, [slotsData, availableSlots]);\n  useEffect(() => {\n    socket.on(\"USER_CONNECTED\", data => {\n      console.log('PARKING RESPONSE');\n      console.log(data);\n    });\n    socket.on(\"parking-update\", data => {\n      console.log('PARKING RESPONSE');\n      console.log(data);\n    });\n    socket.on(\"set-slotsId\", slotsId => {\n      console.log('SET SLOTSID');\n\n      if (slotsId) {\n        localStorage.setItem('slotsId', slotsId);\n        getAllSlots();\n      }\n\n      console.log(slotsId);\n    });\n  }, []);\n\n  const handleUnpark = vals => {\n    let {\n      _id,\n      parking\n    } = vals;\n    setLoading(true);\n    setCardOpen(false);\n    setCardType('info');\n    if (availableSlots === parkingData.slots) return console.log('NO PARKED CAR!');\n    if (!parking) return console.log('NO PARKED CAR!');\n    setCardDisplay(vals);\n\n    if (parking) {\n      setCarDir('out');\n      setCarAnimation(state => true);\n    } else {\n      setCarAnimation(state => false);\n      return console.log('NO PARKED CAR!');\n    }\n\n    parkingLot.remove(_id).then(() => {\n      getAllSlots();\n      setTimeout(() => {\n        setAvailableSlots(parkingLot.getAvailable()); // if(carAnimation){\n\n        setCarAnimation(state => false);\n        setCardDisplay({}); // }\n\n        setLoading(false);\n      }, 500);\n    }).catch(err => {\n      console.log(err);\n      setLoading(false);\n    });\n  };\n\n  const handleShowSummary = vals => {\n    if (vals.isBusy) {\n      let {\n        parking\n      } = vals;\n      let computation = parkingLot.compute(parking);\n      let img = cars.find(a => a.size === parking.carType);\n      setCardDisplay({ ...img,\n        ...vals,\n        computation\n      });\n      setCardOpen(true);\n      setCardType('summary');\n    } else {\n      setCardDisplay({ ...vals,\n        entrances: Array.from(Array(parkingData.entrance).keys())\n      });\n      setCardOpen(true);\n      setCardType('config');\n    }\n  };\n\n  const handleUpdateSlot = vals => {\n    parkingLot.update(vals._id, vals).then(() => {\n      getAllSlots();\n      setTimeout(() => {\n        setAvailableSlots(parkingLot.getAvailable());\n        setCarAnimation(state => false);\n        setLoading(false);\n        handleClose();\n      }, 500);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: styles.dashboard,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.main,\n        children: cardOpen ? cardType !== 'config' ? /*#__PURE__*/_jsxDEV(CarInfoBoard, {\n          type: cardType,\n          availableSlotsCount: availableSlots,\n          handlePark: handlePark,\n          handleUnpark: handleUnpark,\n          handleClose: () => handleClose(),\n          data: cardDisplay\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 6\n        }, this) : /*#__PURE__*/_jsxDEV(SlotInfoBoard, {\n          handleUpdate: handleUpdateSlot,\n          handleClose: () => handleClose(),\n          data: cardDisplay\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 6\n        }, this) : !carAnimation && /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          onClick: () => {\n            setCardOpen(true);\n            setCardType('info');\n            setCardDisplay({});\n          },\n          className: styles.submitBtn,\n          children: \"ENTER VEHICLE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 24\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Car, {\n        animationState: carAnimation,\n        type: carDir,\n        car: cardDisplay,\n        show: !cardOpen && cardDisplay.size\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      style: {\n        minWidth: '500px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(InfoBoard, {\n        availableSlotsCount: availableSlots\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.main,\n        children: rows.map((row, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.row,\n          children: row.map((a, index) => /*#__PURE__*/_jsxDEV(ParkingSlot, {\n            remove: handleShowSummary,\n            data: a,\n            loading: loading\n          }, index + idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 15\n          }, this))\n        }, row + idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 7\n      }, this), !message ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.footerNote,\n        children: \"Click on a parking slot to unpark the car or configure slot.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.footerNoteErr,\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Main, \"60ERqO8JGQ6P3OvfBEir3+rZwn4=\");\n\n_c = Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["useState","useEffect","socketIOClient","Car","styles","ParkingSlot","Controls","ParkingLot","InfoBoard","CarInfoBoard","axios","carUrl","carUrl1","mcarUrl","mcarUrl1","lcarUrl","lcarUrl1","SlotInfoBoard","cars","size","imgFront","imgBack","ROW_LIMIT","Main","parkingData","slotsData","setSlotsData","parkingLot","setParkingLot","slots","data","availableSlots","setAvailableSlots","rows","setRows","carAnimation","setCarAnimation","loading","setLoading","carDir","setCarDir","cardDisplay","setCardDisplay","cardOpen","setCardOpen","cardType","setCardType","message","setMessage","ENDPOINT","socket","handleClose","getAllSlots","slotsId","localStorage","getItem","then","a","filter","s","isBusy","length","catch","err","handlePark","vals","console","log","isFull","park","state","setTimeout","getAvailable","id","distributeSlotsToRows","rowsCount","Math","ceil","slotsCount","row","slot","slotObj","find","slotNum","push","on","setItem","handleUnpark","_id","parking","remove","handleShowSummary","computation","compute","img","carType","entrances","Array","from","entrance","keys","handleUpdateSlot","update","dashboard","main","submitBtn","minWidth","map","idx","index","footerNote","footerNoteErr"],"sources":["C:/Users/jaybee/Desktop/test/00parking/xyz-parking/src/pages/Main/Main.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\nimport { Car } from \"../../components/Car\";\r\n\r\nimport styles from \"./main.module.scss\";\r\nimport { ParkingSlot } from \"../../components/ParkingSlot\";\r\nimport { Controls } from \"../../components/Controls\";\r\nimport ParkingLot from \"../../lib/parking-lot\";\r\nimport { InfoBoard } from \"../../components/InfoBoard/InfoBoard\";\r\nimport { CarInfoBoard } from \"../../components/CarInfoBoard/CarInfoBoard\";\r\n\r\n\r\n\r\nimport axios from 'axios';\r\n\r\n\r\nimport carUrl from \"../../assets/car.png\";\r\nimport carUrl1 from \"../../assets/car1.png\";\r\nimport mcarUrl from \"../../assets/mcar.png\";\r\nimport mcarUrl1 from \"../../assets/mcar1.png\";\r\nimport lcarUrl from \"../../assets/lcar.png\";\r\nimport lcarUrl1 from \"../../assets/lcar1.png\";\r\nimport { SlotInfoBoard } from \"../../components/SlotInfoBoard\";\r\n\r\nlet cars = [\r\n  { size: 'small',\r\n    imgFront: carUrl,\r\n    imgBack: carUrl1 \r\n  },\r\n  { size: 'medium',\r\n  imgFront: mcarUrl,\r\n  imgBack: mcarUrl1 \r\n},\r\n{ size: 'large',\r\nimgFront: lcarUrl,\r\nimgBack: lcarUrl1 \r\n}\r\n]\r\n\r\n\r\n\r\n\r\nconst ROW_LIMIT = 5;\r\n\r\nexport const Main = ({ parkingData }) => {\r\n  const [slotsData, setSlotsData] = useState([]);\r\n \r\n  const [parkingLot, setParkingLot] = useState(new ParkingLot({slots: [], data: {}}));\r\n  const [availableSlots, setAvailableSlots] = useState(0);\r\n  const [rows, setRows] = useState([]);\r\n  const [carAnimation, setCarAnimation] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [carDir, setCarDir] = useState('in');\r\n  const [cardDisplay, setCardDisplay] = useState({});\r\n  const [cardOpen, setCardOpen] = useState(false);\r\n  const [cardType, setCardType] = useState('info');\r\n  const [message, setMessage] = useState(null)\r\n  const ENDPOINT = \"http://localhost:4000\";\r\n\r\n  const socket = socketIOClient(`${ENDPOINT}`, {\r\n    // transports: [\"websocket\"]\r\n  })\r\n  // useEffect(() => {\r\n  //   setParkingLot(new ParkingLot(parkingData.slots));\r\n  //   // setAvailableSlots(parkingData.slots);\r\n  // }, [parkingData.slots]);\r\n\r\n\r\n  const handleClose = () => {\r\n    setCardOpen(false)\r\n    setCardDisplay({});\r\n    setCardType('info')\r\n    setMessage(null)\r\n  }\r\n\r\n\r\n  const getAllSlots = () => {\r\n    let slotsId = localStorage.getItem('slotsId');\r\n\r\n        parkingLot.getAllSlots(slotsId)\r\n        .then(a => {\r\n          setParkingLot(new ParkingLot({slots: a, data: parkingData}));\r\n          setSlotsData(a)\r\n          setAvailableSlots(a.filter((s) => !s.isBusy).length);\r\n        })\r\n        .catch(err => {\r\n          setParkingLot(new ParkingLot({slots: [], data: parkingData}));\r\n          setSlotsData([])\r\n          setAvailableSlots(0);\r\n        })\r\n  }\r\n\r\n\r\n  const handlePark = async (vals) => {\r\n\r\n    setMessage(null)\r\n    \r\n    if(availableSlots === 0) {\r\n      setMessage('OVER LOADED!')\r\n      return console.log('OVER LOADED!') \r\n    }\r\n  \r\n    \r\n    if (parkingLot.isFull()) {\r\n      // setInfoBoardVisible(true);\r\n      return;\r\n    }\r\n   \r\n    let park = await parkingLot.park(vals);\r\n    getAllSlots()\r\n\r\n    if(!park.message){\r\n      setCardOpen(false);\r\n      setCarDir('in')\r\n      setCarAnimation((state) => true);\r\n  \r\n      setCardDisplay(vals)\r\n\r\n      setTimeout(() => {\r\n        setAvailableSlots(parkingLot.getAvailable());\r\n          setCarAnimation((state) => false);\r\n          setLoading(false)\r\n          setCardDisplay({});\r\n\r\n      }, 500)\r\n      setMessage(null)\r\n    } else {\r\n        setMessage(park.message);\r\n      setAvailableSlots(parkingLot.getAvailable());\r\n      setCarAnimation((state) => false);\r\n      setLoading(false)\r\n      setCardDisplay({});\r\n    }\r\n  \r\n  }\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    let id = localStorage.getItem('slotsId');\r\n    if(id){\r\n      getAllSlots()\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n\r\n\r\n    function distributeSlotsToRows() {\r\n      let rowsCount = Math.ceil(slotsData.length / ROW_LIMIT);\r\n      let slotsCount = slotsData.length;\r\n\r\n      const rows = [];\r\n      let row = [];\r\n\r\n\r\n      while (parkingData.slots > 0 && rowsCount > 0) {\r\n        // It's important first to decrement the count of the slots otherwise we will miss one\r\n        slotsCount--;\r\n\r\n        const slot = parkingLot?.slots[slotsCount];\r\n        let slotObj = slotsData.find(a => a.slotNum === slotsCount);\r\n\r\n        if(slotObj){\r\n          row.push(slotObj);\r\n        }\r\n\r\n      \r\n\r\n        if (slotsCount % ROW_LIMIT === 0) {\r\n          rowsCount--;\r\n          rows.push(row);\r\n          row = [];\r\n        }\r\n      }\r\n      setRows(rows);\r\n    }\r\n\r\n    distributeSlotsToRows();\r\n  }, [slotsData, availableSlots]);\r\n\r\n  useEffect(() => {\r\n\r\n\r\n  socket.on(\"USER_CONNECTED\", data => {\r\n    console.log('PARKING RESPONSE')\r\n    console.log(data)\r\n    });\r\n\r\n\r\n      socket.on(\"parking-update\", data => {\r\n\r\n        console.log('PARKING RESPONSE')\r\n        console.log(data)\r\n        });\r\n  \r\n  \r\n        socket.on(\"set-slotsId\", slotsId => {\r\n          console.log('SET SLOTSID')\r\n          if(slotsId){\r\n            localStorage.setItem('slotsId', slotsId);\r\n            getAllSlots();\r\n          }\r\n          console.log(slotsId)\r\n          });\r\n  }, []);\r\n\r\n  const handleUnpark = (vals) => {\r\n\r\n    let { _id, parking } = vals;\r\n    setLoading(true)\r\n    setCardOpen(false);\r\n    setCardType('info')\r\n\r\n    if(availableSlots === parkingData.slots) return console.log('NO PARKED CAR!') \r\n    if(!parking) return console.log('NO PARKED CAR!') \r\n\r\n    setCardDisplay(vals)\r\n \r\n\r\n    if (parking) {\r\n      setCarDir('out')\r\n      setCarAnimation((state) => true);\r\n    } else{\r\n      setCarAnimation((state) => false);\r\n      return console.log('NO PARKED CAR!') \r\n    }\r\n    \r\n      parkingLot.remove(_id).then(() => {\r\n        getAllSlots()\r\n  \r\n        setTimeout(() => {\r\n            setAvailableSlots(parkingLot.getAvailable());\r\n          // if(carAnimation){\r\n            setCarAnimation((state) => false);\r\n            setCardDisplay({});\r\n          // }\r\n          setLoading(false)\r\n        }, 500)\r\n      })\r\n      .catch(err => {\r\n        console.log(err)\r\n        setLoading(false)\r\n      })\r\n  \r\n\r\n  };\r\n\r\n  const handleShowSummary = (vals) => {\r\n    if(vals.isBusy){\r\n    let {parking } = vals;\r\n    let computation = parkingLot.compute(parking);\r\n    let img = cars.find(a => a.size === parking.carType);\r\n    setCardDisplay({ ...img, ...vals, computation})\r\n    setCardOpen(true);\r\n    setCardType('summary')\r\n    } else {\r\n\r\n      setCardDisplay({...vals, entrances: Array.from(Array(parkingData.entrance).keys())})\r\n      setCardOpen(true);\r\n      setCardType('config')\r\n    }\r\n   \r\n  };\r\n\r\n  const handleUpdateSlot = (vals) => {\r\n    parkingLot.update(vals._id, vals)\r\n    .then(() => {\r\n      getAllSlots()\r\n      setTimeout(() => {\r\n          setAvailableSlots(parkingLot.getAvailable());\r\n          setCarAnimation((state) => false);\r\n          setLoading(false)\r\n          handleClose();\r\n        }, 500)\r\n    })\r\n    .catch(err => {\r\n      console.log(err)\r\n    })\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n     <section className={styles.dashboard}>\r\n        {/* {availableSlots !== 0 && <Controls add={handleAddToParking} \r\n        \r\n        getInfo={handleGetInfo} loading={loading} />} */}\r\n        <div className={styles.main}>\r\n      {cardOpen ? cardType !== 'config' ?\r\n     <CarInfoBoard type={cardType} availableSlotsCount={availableSlots} handlePark={handlePark} handleUnpark={handleUnpark} handleClose={() => handleClose()} data={cardDisplay}/>\r\n     : \r\n     <SlotInfoBoard handleUpdate={handleUpdateSlot} handleClose={() => handleClose()} data={cardDisplay}/>\r\n     : !carAnimation &&<button type=\"submit\" onClick={() => { setCardOpen(true); setCardType('info'); setCardDisplay({}) }} className={styles.submitBtn} >ENTER VEHICLE</button>\r\n    }      \r\n    </div>\r\n   <Car animationState={carAnimation} type={carDir} car={cardDisplay} show={!cardOpen && cardDisplay.size}/>\r\n\r\n      </section>\r\n      <section style={{minWidth: '500px'}}>\r\n      <InfoBoard availableSlotsCount={availableSlots} />\r\n      <div className={styles.main}>\r\n        {rows.map((row, idx) => (\r\n          <div key={row + idx} className={styles.row}>\r\n            {row.map((a, index) => (\r\n              <ParkingSlot\r\n                remove={handleShowSummary}\r\n                key={index + idx}\r\n                data={a} \r\n                loading={loading}\r\n               \r\n              />\r\n            ))}\r\n          </div>\r\n        ))}\r\n        </div>\r\n        {!message ? <div className={styles.footerNote}>\r\n      Click on a parking slot to unpark the car or configure slot.\r\n        </div> \r\n        :\r\n        <div className={styles.footerNoteErr}>\r\n        {message}\r\n          </div> \r\n           }\r\n      </section>\r\n     \r\n     \r\n    </>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}